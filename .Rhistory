> install.packages("swirl")
install.packages("swirl")
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.1.1/library")
install.packages ("slidify")
install.packages(c("httr", "RCurl", "swirl"))
search()
library(RODBC)
search()
find.packages("devtools")
install.packages("devtools")
find.packages("devtools")
find.package("devtools")
library(devtools)
find_rtools()
makeCacheMatrix <- function(x,row,col) {
matrix<-NULL
setdata <- function(y){
x <<- y
matrix <<- NULL
}
setmatrixRow <- function(nrow){
row <<- nrow
}
setmatrixCol <- function(ncol){
col <<- ncol
}
setmatrix <- function(){
data <<- getdata()
mrow <<- getmatrixRow()
mcol <<- getmatrixCol()
matrix <<- matrix(data,mrow,mcol)
}
getdata <- function() x
getmatrixRow <- function() row
getmatrixCol <- function() col
getmatrix <- function() matrix
list(setdata = setdata , setmatrixRow = setmatrixRow, setmatrixCol = setmatrixCol, setmatrix = setmatrix,
getdata = getdata, getmatrixRow = getmatrixRow,getmatrixCol =getmatrixCol, getmatrix = getmatrix)
}
cacheSolve<-function(x,...){
matrix<-x$getmatrix()
if(!is.null(matrix)){
message("getting cached data")
inverseMatrix <- solve(matrix)%*%matrix
return (inverseMatrix)
}
data<-x$getdata()
row<-x$getmatrixRow()
col<-x$getmatrixCol()
matrix<-matrix(data,row,col)
x$setmatrix()
inverseMatrix <- solve(matrix)%*%matrix
inverseMatrix
}
makeCacheMatrix(1:4, 2,2)
x <- makeCacheMatrix(1:4, 2,2)
cacheSolve(x)
z <- makeCacheMatrix(1:4, 2,2)
cacheSolve(z)
sessionInfo
?weekdays
---
title: 'Reproducible Research: Peer Assessment 1'
output:
html_document:
keep_md: yes
pdf_document: default
word_document: default
<!-- rmarkdown v1 -->
---
## Loading and preprocessing the data
1. Load the data (i.e. read.csv())
2. Process/transform the data (if necessary) into a format suitable for your
analysis
Set the working directory then download and import the data from the .csv file.
```{r get the data}
library(knitr)
#knitr::opts_chunk$set(cache=FALSE)
setwd("~/GitHub/Repro/RepData_PeerAssessment1")
# fileurl is here
fileurl <- "http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
# create a temporary directory
temp = tempdir()
# create the placeholder ready to receive
acttemp = tempfile(tmpdir=temp, fileext=".zip")
# download into the placeholder
download.file(fileurl, acttemp, mode="wb")
# get the name of the first file in the zip archive
activity = unzip(acttemp, list=TRUE)$Name[1]
# unzip the file to the temporary directory
unzip(acttemp, files=activity, exdir=temp, overwrite=TRUE)
# fpath is the full path to the extracted file
fpath = file.path(temp, activity)
# load the dataframe
activity <- read.csv("activity.csv", as.is=TRUE)
```
## What is mean total number of steps taken per day?
1. Make a histogram of the total number of steps taken each day
```{r total steps daily}
activitynona <- na.omit(activity)
dailystepstot <- aggregate(steps ~ date, activitynona, sum)
hist(dailystepstot$steps, col=1, main="Total number of steps per day",
xlab="Total number of per day")
```
2. Calculate and report the mean and median total number of steps taken
per day
```{r mean total daily steps}
meands <- mean(dailystepstot$steps)
meands
```
```{r median total daily steps}
mediands <- median(dailystepstot$steps)
mediands
```
## What is the average daily activity pattern?
1. Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
and the average number of steps taken, averaged across all days (y-axis)
```{r time series plot 5 mins}
intstep <- aggregate(activitynona$steps,by=list(activitynona$interval),FUN=mean)
plot(intstep$Group.1,intstep$x,type="l",main="Average Steps per 5 Minute Interval",ylab="Average Number of Steps", xlab="Time")
```
2. Which 5-minute interval, on average across all the days in the dataset,
contains the maximum number of steps?
```{r max steps group}
intstep$Group.1[which.max(intstep$x)]
```
## Imputing missing values
1. Calculate and report the total number of missing values in the dataset
(i.e. the total number of rows with NAs)
```{r how many nas}
sum(is.na(activity))
```
2. Devise a strategy for filling in all of the missing values in the dataset. The
strategy does not need to be sophisticated. For example, you could use
the mean/median for that day, or the mean for that 5-minute interval, etc.
I have chosen to use the mean for that 5 minute interval to replace the NA's
3. Create a new dataset that is equal to the original dataset but with the
missing data filled in.
```{r new data with imputed values}
activityinp <- activity
for (row in 1:length(activityinp$steps)){
if(is.na(activityinp[row,1])){
activityinp[row,1]=intstep[intstep$Group.1==activityinp[row,3],2]
}
}
```
4. Make a histogram of the total number of steps taken each day and Calculate
and report the mean and median total number of steps taken per day.
```{r plot of the total steps including imputes}
dailystepstotinp <- aggregate(steps ~ date, activityinp, sum)
hist(dailystepstotinp$steps, col=1, main="Total number of steps per day (inc inputed data)",
xlab="Total number of per day")
```
```{r mean total daily steps post inpute}
meandspi <- mean(dailystepstotinp$steps)
meandspi
```
```{r median total daily steps post inpute}
mediandspi <- median(dailystepstotinp$steps)
mediandspi
```
Do these values differ from the estimates from the first part of the assignment?
What is the impact of imputing missing data on the estimates of the total
daily number of steps?
```{r means and medians comparison}
#these values will be called in the text comparison statement
meandiff <- meands - meandspi
mediandiff <- round((mediandspi - mediands),2)
```
It can be seen that the difference between the means =`r meandiff`, showing no difference; this should be expected as the inputed data points were based on the mean values for the slots. The median however is different and has become `r mediandiff` closer to the mean. Again this is to be expected due to the NA replacement strategy used.
## Are there differences in activity patterns between weekdays and weekends?
1. Create a new factor variable in the dataset with two levels – “weekday”
and “weekend” indicating whether a given date is a weekday or weekend
day.
```{r weekday or weekend determination}
activityinp$dayOfWeek=weekdays(activityinp$date)
activityinp$type=ifelse(activityinp$dayOfWeek=="Saturday"|activityinp$dayOfWeek=="Sunday","weekend","weekday")
activityinp$type=as.factor(activityinp$type)
activityinp$interval=as.factor(activityinp$interval)
```
2. Make a panel plot containing a time series plot (i.e. type = "l") of the
5-minute interval (x-axis) and the average number of steps taken, averaged
across all weekday days or weekend days (y-axis).
```{r comparison plot weekday to weekend}
library(ggplot2)
r=aggregate(l$steps,list(as.factor(activityinp$interval),as.factor(activityinp$type)),mean)
p <- ggplot(r, aes(x = as.integer(Group.1), y=x)) + geom_line()
p + facet_grid(Group.2~.)+xlab("Interval")+ylab("Average Steps in Interval")
```
View(activityinp)
activityinp$dayOfWeek <- weekdays(activityinp$date)
activityinp$date <- as.date(activityinp$date)
activityinp$date <- as.Date(activityinp$date)
activityinp$day <- weekdays(activityinp$date)
activityinp$type <- ifelse(activityinp$day=="Saturday"|activityinp$day=="Sunday","weekend","weekday")
activityinp$type <- as.factor(activityinp$type)
activityinp$interval <- as.factor(activityinp$interval)
View(activityinp)
(
(
library(ggplot2)
r=aggregate(l$steps,list(as.factor(activityinp$interval),as.factor(activityinp$type)),mean)
library(ggplot2)
r=aggregate(l$steps,list(as.factor(activityinp$interval),as.factor(activityinp$type)),mean)
r=aggregate(activityinp$steps,list(as.factor(activityinp$interval),as.factor(activityinp$type)),mean)
p <- ggplot(r, aes(x = as.integer(Group.1), y=x)) + geom_line()
p + facet_grid(Group.2~.)+xlab("Interval")+ylab("Average Steps in Interval")
g
g
g
library(ggplot2)
r=aggregate(activityinp$steps,list(as.factor(activityinp$interval),as.factor(activityinp$type)),mean)
p <- ggplot(r, aes(x = as.integer(Group.1), y=x)) + geom_line()
p + facet_grid(Group.2~.)+xlab("5 Minute Intervals")+ylab("Average Steps in Interval")+ggtitle("Activity Comparison between Weekdays and Weekends")
r=aggregate(activityinp$steps,list(as.factor(activityinp$interval),as.factor(activityinp$type)),mean)
p <- ggplot(r, aes(x = as.integer(Group.1), y=x)) + geom_line()
p + facet_grid(Group.2~.)+xlab("5 Minute Intervals")+ylab("Average Steps in Interval")+ggtitle("Activity Comparison between Weekdays and Weekends")+theme(plot.title = element_text(lineheight=.8, face="bold"
```
r=aggregate(activityinp$steps,list(as.factor(activityinp$interval),as.factor(activityinp$type)),mean)
p <- ggplot(r, aes(x = as.integer(Group.1), y=x)) + geom_line()
p + facet_grid(Group.2~.)+xlab("5 Minute Intervals")+ylab("Average Steps in Interval")+ggtitle("Activity Comparison between Weekdays and Weekends")+theme(plot.title = element_text(lineheight=.8, face="bold")
```
r=aggregate(activityinp$steps,list(as.factor(activityinp$interval),as.factor(activityinp$type)),mean)
p <- ggplot(r, aes(x = as.integer(Group.1), y=x)) + geom_line()
p + facet_grid(Group.2~.)+xlab("5 Minute Intervals")+ylab("Average Steps in Interval")+ggtitle("Activity Comparison between Weekdays and Weekends")+theme(plot.title = element_text(lineheight=.8, face="bold"))
dayscomp=aggregate(activityinp$steps,list(as.factor(activityinp$interval),as.factor(activityinp$type)),mean)
p <- ggplot(dayscomp, aes(x = as.integer(Group.1), y=x)) + geom_line()
p + facet_grid(Group.2~.)+xlab("5 Minute Intervals")+ylab("Average Steps in Interval")+ggtitle("Activity Comparison between Weekdays and Weekends")+theme(plot.title = element_text(lineheight=.8, face="bold"))
devtools::install_github('rstudio/rmarkdown')
