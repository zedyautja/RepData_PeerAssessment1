> install.packages("swirl")
install.packages("swirl")
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.1.1/library")
install.packages ("slidify")
install.packages(c("httr", "RCurl", "swirl"))
search()
library(RODBC)
search()
find.packages("devtools")
install.packages("devtools")
find.packages("devtools")
find.package("devtools")
library(devtools)
find_rtools()
makeCacheMatrix <- function(x,row,col) {
matrix<-NULL
setdata <- function(y){
x <<- y
matrix <<- NULL
}
setmatrixRow <- function(nrow){
row <<- nrow
}
setmatrixCol <- function(ncol){
col <<- ncol
}
setmatrix <- function(){
data <<- getdata()
mrow <<- getmatrixRow()
mcol <<- getmatrixCol()
matrix <<- matrix(data,mrow,mcol)
}
getdata <- function() x
getmatrixRow <- function() row
getmatrixCol <- function() col
getmatrix <- function() matrix
list(setdata = setdata , setmatrixRow = setmatrixRow, setmatrixCol = setmatrixCol, setmatrix = setmatrix,
getdata = getdata, getmatrixRow = getmatrixRow,getmatrixCol =getmatrixCol, getmatrix = getmatrix)
}
cacheSolve<-function(x,...){
matrix<-x$getmatrix()
if(!is.null(matrix)){
message("getting cached data")
inverseMatrix <- solve(matrix)%*%matrix
return (inverseMatrix)
}
data<-x$getdata()
row<-x$getmatrixRow()
col<-x$getmatrixCol()
matrix<-matrix(data,row,col)
x$setmatrix()
inverseMatrix <- solve(matrix)%*%matrix
inverseMatrix
}
makeCacheMatrix(1:4, 2,2)
x <- makeCacheMatrix(1:4, 2,2)
cacheSolve(x)
z <- makeCacheMatrix(1:4, 2,2)
cacheSolve(z)
library(knitr)
knit2html(PA1_template.Rmd)
setwd("~/GitHub/Repro/RepData_PeerAssessment1")
knit2html(PA1_template.Rmd)
?knit2html
setwd("~/GitHub/Repro/RepData_PeerAssessment1")
knit2html("PA1_template.Rmd")
