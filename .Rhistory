> install.packages("swirl")
install.packages("swirl")
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.1.1/library")
install.packages ("slidify")
install.packages(c("httr", "RCurl", "swirl"))
search()
library(RODBC)
search()
find.packages("devtools")
install.packages("devtools")
find.packages("devtools")
find.package("devtools")
library(devtools)
find_rtools()
makeCacheMatrix <- function(x,row,col) {
matrix<-NULL
setdata <- function(y){
x <<- y
matrix <<- NULL
}
setmatrixRow <- function(nrow){
row <<- nrow
}
setmatrixCol <- function(ncol){
col <<- ncol
}
setmatrix <- function(){
data <<- getdata()
mrow <<- getmatrixRow()
mcol <<- getmatrixCol()
matrix <<- matrix(data,mrow,mcol)
}
getdata <- function() x
getmatrixRow <- function() row
getmatrixCol <- function() col
getmatrix <- function() matrix
list(setdata = setdata , setmatrixRow = setmatrixRow, setmatrixCol = setmatrixCol, setmatrix = setmatrix,
getdata = getdata, getmatrixRow = getmatrixRow,getmatrixCol =getmatrixCol, getmatrix = getmatrix)
}
cacheSolve<-function(x,...){
matrix<-x$getmatrix()
if(!is.null(matrix)){
message("getting cached data")
inverseMatrix <- solve(matrix)%*%matrix
return (inverseMatrix)
}
data<-x$getdata()
row<-x$getmatrixRow()
col<-x$getmatrixCol()
matrix<-matrix(data,row,col)
x$setmatrix()
inverseMatrix <- solve(matrix)%*%matrix
inverseMatrix
}
makeCacheMatrix(1:4, 2,2)
x <- makeCacheMatrix(1:4, 2,2)
cacheSolve(x)
z <- makeCacheMatrix(1:4, 2,2)
cacheSolve(z)
knit2html("PA1_template.Rmd")
library(knitr)
knit2html("PA1_template.Rmd")
setwd("~/GitHub/Repro/RepData_PeerAssessment1")
knit2html("PA1_template.Rmd")
setwd("~/GitHub/Repro/RepData_PeerAssessment1")
# fileurl is here
fileurl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
# create a temporary directory
temp = tempdir()
# create the placeholder ready to receive
acttemp = tempfile(tmpdir=temp, fileext=".zip")
# download into the placeholder
download.file(fileurl, acttemp)
# get the name of the first file in the zip archive
activity = unzip(acttemp, list=TRUE)$Name[1]
# unzip the file to the temporary directory
unzip(acttemp, files=activity, exdir=temp, overwrite=TRUE)
# fpath is the full path to the extracted file
fpath = file.path(temp, activity)
# load the dataframe
activity <- read.csv("activity.csv", as.is=TRUE)
```
## What is mean total number of steps taken per day?
```r
# For this part of the assignment, you can ignore the missing values in the dataset.
activitynona <- na.omit(activity)
# Make a histogram of the total number of steps taken each day
dailystepstot <- aggregate(steps ~ date, activitynona, sum)
hist(dailystepstot$steps, col=1, main="Total number of steps per day",
xlab="Total number of per day")
intstep <- aggregate(activitynona$steps,by=list(activitynona$interval),FUN=mean)
View(intstep)
intstep <- aggregate(activitynona$steps,by=list(activitynona$interval),FUN=mean)
plot(intstep$Group.1,intstep$x,type="l",ylab="Average Steps per 5 Minute Interval", xlab="Time")
plot(intstep$Group.1,intstep$x,type="l",main="Average Steps per 5 Minute Interval",ylab="Average Steps per 5 Minute Interval", xlab="Time")
plot(intstep$Group.1,intstep$x,type="l",main="Average Steps per 5 Minute Interval",ylab="Average Steps", xlab="Time")
plot(intstep$Group.1,intstep$x,type="l",main="Average Steps per 5 Minute Interval",ylab="Average Number of Steps", xlab="Time")
max(intstep$x)
intstep$Group.1[which.max(c$x)]
intstep$Group.1[which.max(intstep$x)]
sum(is.na(activity))
activityinp <- activity
for (row in 1:length(activityinp$steps)){
if(is.na(activityinp[row,1])){
activityinp[row,1]=intstep[intstep$Group.1==l[row,3],2]
}
}
activityinp <- activity
for (row in 1:length(activityinp$steps)){
if(is.na(activityinp[row,1])){
activityinp[row,1]=intstep[intstep$Group.1==activityinp[row,3],2]
}
}
View(activityinp)
View(activity)
View(activityinp)
dailystepstotinp <- aggregate(steps ~ date, activityinp, sum)
hist(dailystepstotinp$steps, col=1, main="Total number of steps per day (inc inputed data)",
xlab="Total number of per day")
meandspi <- mean(dailystepstotinp$steps)
print(meandspi)
```
```{r median total daily steps post inpute}
mediandspi <- median(dailystepstotinp$steps)
print(mediandspi)
meands <- mean(dailystepstot$steps)
print(meands)
```
```{r median total daily steps}
mediands <- median(dailystepstot$steps)
print(mediands)
meandiff <- meands - meandspi
mediandiff <- mediands - mediandspi
mediandiff <- round(mediands - mediandspi),2
mediandiff <- round((mediands - mediandspi),2)
mediandiff <- round((mediandspi - mediands),2)
knitr::opts_chunk$set(cache=FALSE)
